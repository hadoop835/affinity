kafka.bootstrap.servers="???"

affinity {

  node {
    gateway {
      class = io.amient.affinity.example.ExampleWordCount
      stream {
        input-stream {
          class = io.amient.affinity.kafka.KafkaLogStorage
          kafka {
            topic = "input1"
            bootstrap.servers = ${kafka.bootstrap.servers}
            consumer.group.id = "test-input-stream"
          }
        }

        output-stream {
          class = io.amient.affinity.kafka.KafkaLogStorage
          kafka {
            topic = "output1"
            bootstrap.servers = ${kafka.bootstrap.servers}
          }
        }
      }
    }
  }

  global {
    state-counter {
      memstore.class = io.amient.affinity.core.storage.MemStoreSimpleMap
      storage {
        class = io.amient.affinity.kafka.KafkaLogStorage
        kafka {
          bootstrap.servers = ${kafka.bootstrap.servers}
          topic = "state1"
        }
      }
    }
  }

  avro {
    schema.registry.class = io.amient.affinity.avro.MemorySchemaRegistry
  }

  coordinator {
    class = io.amient.affinity.core.cluster.CoordinatorZk
  }
}

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}